<?xml version="1.0" encoding="UTF-8"?>
<project name="Upfit" phingVersion="2.5.0" basedir="." default="ci">

    <!-- ================================================================== -->
    <!-- Properties                                                         -->
    <!-- ================================================================== -->

    <!-- General properties -->
    <property name="path.composer"          value="composer.phar" />
    <property name="path.php"               value="php" />
    <property name="path.phpcsfixer"        value="php-cs-fixer.phar" />
    <property name="path.behat"             value="bin/behat" />
    <property name="path.phpcs"             value="bin/phpcs" />
    <property name="path.phpmd"             value="bin/phpmd" />
    <property name="path.phpcpd"            value="bin/phpcpd" />
    <property name="path.phpunit"           value="bin/phpunit" />
    <property name="path.phploc"            value="bin/phploc" />
    <property name="path.pdepend"           value="bin/pdepend" />
    <property name="path.security-checker"  value="bin/security-checker" />
    <property name="path.phpdoc"            value="phpdoc" />
    <property name="dir.src"                value="${project.basedir}/src" />
    <property name="dir.build"              value="${project.basedir}/build" />
    <property name="dir.reports"            value="${dir.build}/reports" />
    <property name="dir.reports.docs"       value="${dir.reports}/docs" />
    <property name="dir.reports.depend"     value="${dir.reports}/depend" />
    <property name="dir.reports.test"       value="${dir.reports}/test" />
    <property name="dir.reports.test.behat" value="${dir.reports.test}/behat" />
    <property name="dir.reports.test.unit"  value="${dir.reports.test}/unit" />
    <property name="bundle"                 value="@AcmeDemoBundle" />
    <property name="dir.bundle"             value="${dir.src}/Acme/DemoBundle" />

    <!-- Custom properties -->
    <property file="build.properties" override="true"/>
    <import file="build-install.xml"/>
    <import file="build-check.xml"/>
    <import file="build-test.xml"/>
    <import file="build-db.xml"/>

    <!-- ================================================================== -->
    <!-- Build                                                              -->
    <!-- ================================================================== -->

    <target name="run:assets"
            description="generate assets"
            depends="cache:clear:prod">
        <delete dir="web/css"/>
        <delete dir="web/js"/>
        <SymfonyConsole command="assetic:dump" checkreturn="true">
            <arg value="--env=prod"/>
        </SymfonyConsole>
    </target>

    <target name="run:lang"
            description="generate lang files"
            depends="cache:clear:prod">
        <SymfonyConsole command="translation:extract" checkreturn="true">
            <arg value="--ansi"/>
            <arg value="--env=prod"/>
            <arg value="--config=BpaulinUpfitBundle"/>
            <arg value="en de es fr"/>
        </SymfonyConsole>
    </target>

    <target name="pre:release"
            description="update everything and test"
            depends="composer:update, run:lang, run:assets, ci">
    </target>

    <!-- ================================================================== -->
    <!-- Tools                                                              -->
    <!-- ================================================================== -->

    <target name="tools:start"
            description="start php server and phantomjs"
            depends="tools:server:start, tools:phantom:start"/>

    <target name="tools:server:start">
        <if>
            <available file="./pid-server.txt"/>
            <then>
                <fail message="php server already started"/>
            </then>
            <else>
                <exec command="bash scripts/server.sh" spawn="true" output="./pid-server.txt" />
                <echo msg="php server started"/>
            </else>
        </if>
    </target>

    <target name="tools:phantom:start">
        <if>
            <available file="./pid-phantom.txt"/>
            <then>
                <fail message="phantom server already started"/>
            </then>
            <else>
                <exec command="bash scripts/phantom.sh" spawn="true" output="./pid-phantom.txt" />
                <echo msg="phantom server started"/>
            </else>
        </if>
    </target>

    <target name="tools:stop"
            description="stop php server and phantomjs"
            depends="tools:server:stop, tools:phantom:stop"/>

    <target name="tools:server:stop">
        <if>
            <not>
                <available file="./pid-server.txt"/>
            </not>
            <then>
                <fail message="php server already running"/>
            </then>
            <else>
                <loadfile property="pid-server" file="./pid-server.txt">
                    <filterchain>
                        <striplinebreaks />
                    </filterchain>
                </loadfile>
                <echo msg="php server ${pid-server} killed" />
                <exec command="kill ${pid-server}" dir="./" />
                <delete file="./pid-server.txt" />
            </else>
        </if>
    </target>

    <target name="tools:phantom:stop">
        <if>
            <not>
                <available file="./pid-phantom.txt"/>
            </not>
            <then>
                <fail message="phantom server already running"/>
            </then>
            <else>
                <loadfile property="pid-phantom" file="./pid-phantom.txt">
                    <filterchain>
                        <striplinebreaks />
                    </filterchain>
                </loadfile>
                <echo msg="phantom server ${pid-phantom} killed" />
                <exec command="kill ${pid-phantom}" dir="./" />
                <delete file="./pid-phantom.txt" />
            </else>
        </if>
    </target>

    <!-- ================================================================== -->
    <!-- CI                                                                 -->
    <!-- ================================================================== -->

    <target name="ci"
            description="continuous integration"
            depends="test, check">
    </target>

    <target name="ci:clean"
            depends="install:clean, install:ci, ci">
    </target>

    <!-- ================================================================== -->
    <!-- Fixing                                                             -->
    <!-- ================================================================== -->

    <target name="fix:style"
            description="fix code style">
        <exec executable="${path.php}" passthru="true">
            <arg value="${path.phpcsfixer}"/>
            <arg value="fix"/>
            <arg path="${dir.src}"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Reports                                                            -->
    <!-- ================================================================== -->

    <target name="report"
            description="generate all reports"
            depends="report:unit, report:behat, report:doc, report:depend, report:loc">
    </target>

    <target name="report:behat">
        <mkdir dir="${dir.reports.test.behat}" />
        <exec executable="${path.php}" passthru="true">
            <arg value="${path.behat}"/>
            <arg value="--ansi"/>
            <arg value="--expand"/>
            <arg value="--profile=report"/>
        </exec>
    </target>

    <target name="report:behat:clover">
        <mkdir dir="${dir.reports.test.behat}" />
        <exec executable="${path.php}" passthru="true">
            <arg value="${path.phpunit}"/>
            <arg value="--coverage-text"/>
            <arg value="--coverage-clover=${dir.reports.test.behat}/clover.xml"/>
            <arg value="--coverage-html=${dir.reports.test.behat}/coverage"/>
            <arg line="--group behat-with-browser"/>
            <arg value="--configuration=app/phpunit.xml.behat"/>
        </exec>
    </target>

    <target name="report:behat:clover:no-browser">
        <mkdir dir="${dir.reports.test.behat}" />
        <exec executable="${path.php}" passthru="true">
            <arg value="${path.phpunit}"/>
            <arg value="--coverage-text"/>
            <arg value="--coverage-clover=${dir.reports.test.behat}/clover.xml"/>
            <arg value="--coverage-html=${dir.reports.test.behat}/coverage"/>
            <arg line="--group behat-without-browser"/>
            <arg value="--configuration=app/phpunit.xml.behat"/>
        </exec>
    </target>

    <target name="report:unit">
        <mkdir dir="${dir.reports.test.unit}" />
        <exec executable="${path.php}" passthru="true">
            <arg value="${path.phpunit}"/>
            <arg value="--testdox-html=${dir.reports.test.unit}/testdox.html"/>
            <arg value="--log-junit=${dir.reports.test.unit}/phpunit.xml"/>
            <arg value="--coverage-text"/>
            <arg value="--coverage-clover=${dir.reports.test.unit}/clover.xml"/>
            <arg value="--coverage-html=${dir.reports.test.unit}/coverage"/>
            <arg line="--exclude-group behat"/>
            <arg value="--configuration=app"/>
        </exec>
    </target>

    <target name="report:depend">
        <mkdir dir="${dir.reports.depend}" />
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.pdepend}"/>
            <arg line="--summary-xml=${dir.reports.depend}/summary.xml"/>
            <arg line="--jdepend-chart=${dir.reports.depend}/jdepend.svg"/>
            <arg line="--overview-pyramid=${dir.reports.depend}/pyramid.svg"/>
            <arg path="${dir.src}"/>
        </exec>
    </target>

    <target name="report:doc">
        <exec executable="${path.php}" passthru="true">
            <arg value="${path.phpdoc}"/>
            <arg value="--ansi"/>
            <arg line="-i *Test.php,*Features/Context/*"/>
            <arg line="-d ${dir.src}"/>
            <arg line="-t ${dir.reports.docs}"/>
        </exec>
    </target>

    <target name="report:loc">
        <exec executable="${path.php}" passthru="true" output="${dir.reports}/loc.txt">
            <arg value="${path.phploc}"/>
            <arg value="--count-tests"/>
            <arg line="${dir.src}"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Clear                                                              -->
    <!-- ================================================================== -->

    <target name="cache:clear:test">
        <SymfonyConsole command="cache:clear" checkreturn="true">
            <arg value="--env=test"/>
        </SymfonyConsole>
    </target>

    <target name="cache:clear:dev">
        <SymfonyConsole command="cache:clear" checkreturn="true">
            <arg value="--env=dev"/>
        </SymfonyConsole>
    </target>

    <target name="cache:clear:prod">
        <SymfonyConsole command="cache:clear" checkreturn="true">
            <arg value="--env=prod"/>
        </SymfonyConsole>
    </target>
</project>
