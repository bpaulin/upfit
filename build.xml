<?xml version="1.0" encoding="UTF-8"?>
<project name="Upfit" basedir="." default="check">

    <property file="build.properties" />

    <target name="composer:self-update">
        <composer command="self-update" composer="${path.composer}" php="${path.php}"/>
    </target>

    <target name="composer:update"
            depends="composer:self-update">
        <composer command="update" composer="${path.composer}" php="${path.php}"/>
    </target>

    <target name="composer:install"
            depends="composer:self-update">
        <composer command="install" composer="${path.composer}" php="${path.php}"/>
    </target>

    <target name="composer:deploy"
            depends="composer:self-update">
        <composer command="install" composer="${path.composer}" php="${path.php}">
            <arg value="--no-dev" />
            <arg value="--optimize-autoloader" />
        </composer>
    </target>

    <target name="check:style">
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.phpcs}"/>
            <arg value="-p"/>
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg path="${dir.src}"/>
        </exec>
    </target>

    <target name="check:mess">
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.phpmd}"/>
            <arg path="${dir.src}"/>
            <arg value="text"/>
            <arg value="app/phpmd_rules.xml"/>
        </exec>
    </target>

    <target name="check:cpd">
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.phpcpd}"/>
            <arg line="--names *.php,*.twig"/>
            <arg line="--min-lines 5"/>
            <arg line="--min-tokens 70"/>
            <arg path="${dir.src}"/>
        </exec>
    </target>

    <target name="check:lint:twig">
        <SymfonyConsole command="twig:lint">
            <arg value="${bundle}" quotes="true"/>
        </SymfonyConsole>
    </target>

    <target name="check:lint:php">
        <phplint interpreter="${path.php}" haltonfailure="true">
            <fileset dir="${dir.src}">
                <include name="**/*.php"/>
            </fileset>
        </phplint>
    </target>

    <target name="check:lint"
            depends="check:lint:twig,check:lint:php">
    </target>

    <target name="check:base"
            depends="check:base:schema">
    </target>

    <target name="check:base:schema">
        <SymfonyConsole checkreturn="true" command="doctrine:schema:validate">
            <arg value="--env=test"/>
        </SymfonyConsole>
    </target>

    <target name="check:test">
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.phpunit}"/>
            <arg value="--configuration=app"/>
            <arg value="--exclude-group=behat"/>
        </exec>
    </target>

    <target name="check:behat">
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.behat}"/>
            <arg value="--ansi"/>
            <arg value="--strict"/>
            <arg value="--expand"/>
        </exec>
    </target>

    <target name="check:behat:headless">
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.behat}"/>
            <arg value="--ansi"/>
            <arg value="--strict"/>
            <arg value="--expand"/>
            <arg value="--profile=headless"/>
        </exec>
    </target>

    <target name="check:behat:wip">
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.behat}"/>
            <arg value="--ansi"/>
            <arg value="--strict"/>
            <arg value="--expand"/>
            <arg value="--profile=wip"/>
        </exec>
    </target>

    <target name="check:wip"
            depends="check:lint,check:test,check:behat:wip">
    </target>

    <target name="check:visual"
            depends="base:test:reset">
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.behat}"/>
            <arg value="--ansi"/>
            <arg value="--profile=demo"/>
            <arg value="--no-paths"/>
        </exec>
    </target>

    <target name="check:common"
            depends="base:test:reset,check:lint,check:style,check:mess,check:cpd,check:base,check:test">
    </target>

    <target name="check:headless"
            depends="check:common,check:behat:headless">
    </target>

    <target name="check"
            depends="check:common,check:behat">
    </target>

    <target name="check:doc">
        <exec executable="${path.phpdoc}" passthru="true" checkreturn="true">
            <arg value="--ansi"/>
            <arg value="--force"/>
            <arg line="-d ${dir.src}"/>
            <arg line="-t ${dir.reports.docs}"/>
            <arg line="-i *Test.php,*Features/Context/*"/>
            <arg line="--template checkstyle"/>
        </exec>
    </target>

    <target name="prod:test">
        <SymfonyConsole command="assetic:dump">
            <arg value="--env=prod"/>
        </SymfonyConsole>
        <SymfonyConsole command="cache:clear">
            <arg value="--env=prod"/>
        </SymfonyConsole>
    </target>

    <target name="report:behat">
        <mkdir dir="${dir.reports.test.behat}" />
        <exec executable="${path.php}" passthru="true">
            <arg value="${path.behat}"/>
            <arg value="--ansi"/>
            <arg value="--expand"/>
            <arg value="--profile=report"/>
        </exec>
    </target>

    <target name="report:mess">
        <exec executable="${path.php}" passthru="true" checkreturn="false">
            <arg value="${path.phpmd}"/>
            <arg path="${dir.src}"/>
            <arg value="html"/>
            <arg value="app/phpmd_rules.xml"/>
            <arg line="--reportfile ${dir.reports}/mess.html"/>
        </exec>
    </target>

    <target name="report:cpd">
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.phpcpd}"/>
            <arg line="--names *.php,*.twig"/>
            <arg line="--min-lines 5"/>
            <arg line="--min-tokens 70"/>
            <arg line="--log-pmd ${dir.reports}/cpd.xml"/>
            <arg path="${dir.src}"/>
        </exec>
    </target>

    <target name="report:test">
        <mkdir dir="${dir.reports.test.behat}" />
        <exec executable="${path.php}" passthru="true">
            <arg value="${path.phpunit}"/>
            <arg value="--testdox-html=${dir.reports.test}/testdox.html"/>
            <arg value="--log-junit=${dir.reports.test}/phpunit.xml"/>
            <arg value="--coverage-text"/>
            <arg value="--coverage-clover=${dir.reports.test}/clover.xml"/>
            <arg value="--coverage-html=${dir.reports.test}/coverage"/>
            <arg value="--configuration=app"/>
        </exec>
    </target>

    <target name="report:doc">
        <exec executable="${path.phpdoc}" passthru="true">
            <arg value="--ansi"/>
            <arg line="-i *Test.php,*Features/Context/*"/>
            <arg line="-d ${dir.src}"/>
            <arg line="-t ${dir.reports.docs}"/>
        </exec>
    </target>

    <target name="report"
            depends="base:test:reset,report:mess,report:test, report:doc">
    </target>

    <target name="base:test:drop">
        <SymfonyConsole command="doctrine:database:drop">
            <arg value="--env=test"/>
            <arg value="--force"/>
        </SymfonyConsole>
    </target>

    <target name="base:test:create">
        <SymfonyConsole command="doctrine:database:create" checkreturn="true">
            <arg value="--env=test"/>
        </SymfonyConsole>
    </target>

    <target name="base:test:update">
        <SymfonyConsole command="doctrine:schema:create" checkreturn="true">
            <arg value="--env=test"/>
        </SymfonyConsole>
    </target>

    <target name="base:test:fill">
        <SymfonyConsole command="doctrine:fixtures:load" checkreturn="true">
            <arg value="--env=test"/>
            <arg value="--no-interaction"/>
            <arg value="--fixtures=${dir.bundle}/DataFixtures/ORM/Test"/>
        </SymfonyConsole>
    </target>

    <target name="base:test:reset"
            depends="base:test:drop,base:test:create,base:test:update,base:test:fill"/>

    <target name="base:dev:drop">
        <SymfonyConsole command="doctrine:database:drop">
            <arg value="--env=dev"/>
            <arg value="--force"/>
        </SymfonyConsole>
    </target>

    <target name="base:dev:create">
        <SymfonyConsole command="doctrine:database:create" checkreturn="true">
            <arg value="--env=dev"/>
        </SymfonyConsole>
    </target>

    <target name="base:dev:update">
        <SymfonyConsole command="doctrine:migrations:migrate" checkreturn="true">
            <arg value="--env=dev"/>
            <arg value="--no-interaction"/>
        </SymfonyConsole>
    </target>

    <target name="base:dev:fill">
        <SymfonyConsole command="doctrine:fixtures:load" checkreturn="true">
            <arg value="--env=dev"/>
            <arg value="--no-interaction"/>
            <arg value="--fixtures=${dir.bundle}/DataFixtures/ORM/Test"/>
        </SymfonyConsole>
    </target>

    <target name="base:dev:reset"
            depends="base:dev:drop,base:dev:create,base:dev:update,base:dev:fill"/>

    <target name="asset:generate">
        <SymfonyConsole command="cache:clear" checkreturn="true">
            <arg value="--env=prod"/>
        </SymfonyConsole>
        <SymfonyConsole command="assetic:dump" checkreturn="true">
            <arg value="--env=prod"/>
        </SymfonyConsole>
    </target>
</project>
