<?xml version="1.0" encoding="UTF-8"?>
<project name="Upfit" basedir="." default="run:ci">

    <!-- ================================================================== -->
    <!-- Properties                                                         -->
    <!-- ================================================================== -->

    <!-- General properties -->
    <property name="path.composer"          value="composer.phar" />
    <property name="path.php"               value="php" />
    <property name="path.phpcsfixer"        value="php-cs-fixer.phar" />
    <property name="path.behat"             value="bin/behat" />
    <property name="path.phpcs"             value="bin/phpcs" />
    <property name="path.phpmd"             value="bin/phpmd" />
    <property name="path.phpcpd"            value="bin/phpcpd" />
    <property name="path.phpunit"           value="bin/phpunit" />
    <property name="path.phploc"            value="bin/phploc" />
    <property name="path.security-checker"  value="bin/security-checker" />
    <property name="path.phpdoc"            value="bin/phpdoc.php" />
    <property name="dir.src"                value="${project.basedir}/src" />
    <property name="dir.build"              value="${project.basedir}/build" />
    <property name="dir.reports"            value="${dir.build}/reports" />
    <property name="dir.reports.docs"       value="${dir.reports}/docs" />
    <property name="dir.reports.test"       value="${dir.reports}/test" />
    <property name="dir.reports.test.behat" value="${dir.reports.test}/behat" />
    <property name="dir.reports.test.unit"  value="${dir.reports.test}/unit" />
    <property name="bundle"                 value="@AcmeDemoBundle" />
    <property name="dir.bundle"             value="${dir.src}/Acme/DemoBundle" />

    <!-- Custom properties -->
    <property file="build.properties" override="true"/>

    <!-- ================================================================== -->
    <!-- Build                                                              -->
    <!-- ================================================================== -->

    <target name="run:demo"
            description="behat tests (all executed with selenium)"
            depends="base:test:reset">
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.behat}"/>
            <arg value="--ansi"/>
            <arg value="--profile=demo"/>
            <arg value="--no-paths"/>
        </exec>
    </target>

    <target name="run:ci"
            description="continuous integration"
            depends="test, check">
    </target>

    <target name="run:deploy"
            description="magical (?!) deploy command"
            depends="composer:deploy, base:prod:update">
        <SymfonyConsole command="cache:clear">
            <arg value="--env=prod"/>
        </SymfonyConsole>
    </target>

    <target name="run:assets"
            description="generate assets">
        <SymfonyConsole command="cache:clear" checkreturn="true">
            <arg value="--env=prod"/>
        </SymfonyConsole>
        <SymfonyConsole command="assetic:dump" checkreturn="true">
            <arg value="--env=prod"/>
        </SymfonyConsole>
    </target>

    <!-- ================================================================== -->
    <!-- CI                                                                 -->
    <!-- ================================================================== -->

    <target name="ci:travis"
            description="continuous integration"
            depends="test, check">
    </target>

    <target name="ci:jenkins"
            description="continuous integration"
            depends="test:no-browser, check, report:no-browser">
    </target>

    <!-- ================================================================== -->
    <!-- Clean                                                              -->
    <!-- ================================================================== -->

    <target name="clean:reports">
        <delete dir="${dir.reports}"/>
    </target>

    <!-- ================================================================== -->
    <!-- Install                                                            -->
    <!-- ================================================================== -->

    <target name="install:ci"
            description="install deps and testing db"
            depends="composer:install, base:test:reset">
    </target>

    <target name="install:dev"
            description="let's code!"
            depends="install:ci, base:dev:reset">
    </target>

    <!-- ================================================================== -->
    <!-- Composer                                                           -->
    <!-- ================================================================== -->

    <target name="composer:self-update">
        <composer command="self-update"
                  composer="${path.composer}"
                  php="${path.php}"/>
    </target>

    <target name="composer:update"
            description="update dependencies">
        <composer command="update"
                  composer="${path.composer}"
                  php="${path.php}"/>
    </target>

    <target name="composer:install"
            description="install dependencies">
        <composer command="install" composer="${path.composer}" php="${path.php}"/>
    </target>

    <target name="composer:deploy"
            description="install dependencies for prod">
        <composer command="install" composer="${path.composer}" php="${path.php}">
            <arg value="--no-dev" />
            <arg value="--optimize-autoloader" />
        </composer>
        <exec command="find ./vendor -name '.git' -exec rm -rf {} \;" passthru="true"/>
    </target>

    <!-- ================================================================== -->
    <!-- Fixing                                                           -->
    <!-- ================================================================== -->

    <target name="fix:style"
            description="fix code style">
        <exec executable="${path.php}" passthru="true">
            <arg value="${path.phpcsfixer}"/>
            <arg value="fix"/>
            <arg path="${dir.src}"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Checks                                                             -->
    <!-- ================================================================== -->

    <target name="check"
            description="check code quality"
            depends="check:syntax,check:style,check:mess,check:cpd,check:debug,check:doc">
    </target>

    <target name="check:syntax"
            depends="check:syntax:twig,check:syntax:php">
    </target>

    <target name="check:syntax:twig">
        <SymfonyConsole command="twig:lint">
            <arg value="${bundle}" quotes="true"/>
        </SymfonyConsole>
    </target>

    <target name="check:syntax:php">
        <phplint interpreter="${path.php}" haltonfailure="true">
            <fileset dir="${dir.src}">
                <include name="**/*.php"/>
            </fileset>
        </phplint>
    </target>

    <target name="check:style">
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.phpcs}"/>
            <arg value="-p"/>
            <arg value="--standard=PSR2"/>
            <arg path="${dir.src}"/>
        </exec>
    </target>

    <target name="check:mess">
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.phpmd}"/>
            <arg path="${dir.src}"/>
            <arg value="text"/>
            <arg value="app/phpmd_rules.xml"/>
        </exec>
    </target>

    <target name="check:cpd">
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.phpcpd}"/>
            <arg line="--names *.php,*.twig"/>
            <arg line="--min-lines 5"/>
            <arg line="--min-tokens 70"/>
            <arg path="${dir.src}"/>
        </exec>
    </target>

    <target name="check:doc">
        <exec executable="${path.phpdoc}" passthru="true">
            <arg value="--ansi"/>
            <arg value="--force"/>
            <arg line="-d ${dir.src}"/>
            <arg line="-t ${dir.reports.docs}"/>
            <arg line="-i *Test.php,*Features/Context/*"/>
            <arg line="--template checkstyle"/>
        </exec>
    </target>

    <target name="check:deps">
        <exec executable="${path.php}" passthru="true" checkreturn="false">
            <arg value="${path.security-checker}"/>
            <arg value="security:check"/>
            <arg value="--ansi"/>
        </exec>
    </target>

    <target name="check:debug">
        <exec command="! grep -n '@wip' ${dir.bundle}/Features/*.feature" passthru="true" checkreturn="true"/>
        <exec command="! grep -n '@group wip' ${dir.bundle}/Tests/**/*.php" passthru="true" checkreturn="true"/>
    </target>

    <!-- ================================================================== -->
    <!-- Tests                                                              -->
    <!-- ================================================================== -->

    <target name="test"
            description="run all tests"
            depends="test:base,test:unit,test:behat">
    </target>

    <target name="test:wip"
            description="run all tests"
            depends="test:unit:wip,test:behat:wip">
    </target>

    <target name="test:no-browser"
            description="run all tests"
            depends="test:base,test:unit,test:behat:no-browser">
    </target>

    <target name="test:base"
            depends="base:test:drop,base:test:create,base:test:update,base:test:fill">
        <SymfonyConsole command="doctrine:schema:validate" checkreturn="true">
            <arg value="--env=test"/>
        </SymfonyConsole>
    </target>

    <target name="test:unit"
            description="unit tests">
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.phpunit}"/>
            <arg value="--configuration=app"/>
            <arg value="--exclude-group=behat"/>
        </exec>
    </target>

    <target name="test:unit:wip"
            description="unit tests">
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.phpunit}"/>
            <arg value="--configuration=app"/>
            <arg line="--group wip"/>
        </exec>
    </target>

    <target name="test:behat:no-browser">
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.behat}"/>
            <arg value="--ansi"/>
            <arg value="--strict"/>
            <arg value="--expand"/>
            <arg value="--tags=~@javascript"/>
        </exec>
    </target>

    <target name="test:behat:browser">
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.behat}"/>
            <arg value="--ansi"/>
            <arg value="--strict"/>
            <arg value="--expand"/>
            <arg value="--tags=@javascript"/>
        </exec>
    </target>

    <target name="test:behat"
            description="behat tests"
            depends="test:behat:no-browser, test:behat:browser">
    </target>

    <target name="test:behat:wip"
            description="behat tests (only marqued as '@wip')">
        <exec executable="${path.php}" passthru="true" checkreturn="true">
            <arg value="${path.behat}"/>
            <arg value="--ansi"/>
            <arg value="--strict"/>
            <arg value="--expand"/>
            <arg value="--profile=wip"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Reports                                                            -->
    <!-- ================================================================== -->

    <target name="report"
            description="generate all reports"
            depends="report:unit, report:behat, report:doc, report:loc">
    </target>

    <target name="report:no-browser"
            description="generate all reports"
            depends="report:unit, report:behat:no-browser, report:doc, report:loc">
    </target>

    <target name="report:behat">
        <mkdir dir="${dir.reports.test.behat}" />
        <exec executable="${path.php}" passthru="true">
            <arg value="${path.phpunit}"/>
            <arg value="--coverage-text"/>
            <arg value="--coverage-clover=${dir.reports.test.behat}/clover.xml"/>
            <arg value="--coverage-html=${dir.reports.test.behat}/coverage"/>
            <arg line="--group behat-with-browser"/>
            <arg value="--configuration=app/phpunit.xml.behat"/>
        </exec>
    </target>

    <target name="report:behat:no-browser">
        <mkdir dir="${dir.reports.test.behat}" />
        <exec executable="${path.php}" passthru="true">
            <arg value="${path.phpunit}"/>
            <arg value="--coverage-text"/>
            <arg value="--coverage-clover=${dir.reports.test.behat}/clover.xml"/>
            <arg value="--coverage-html=${dir.reports.test.behat}/coverage"/>
            <arg line="--group behat-without-browser"/>
            <arg value="--configuration=app/phpunit.xml.behat"/>
        </exec>
    </target>

    <target name="report:unit">
        <mkdir dir="${dir.reports.test.unit}" />
        <exec executable="${path.php}" passthru="true">
            <arg value="${path.phpunit}"/>
            <arg value="--testdox-html=${dir.reports.test.unit}/testdox.html"/>
            <arg value="--log-junit=${dir.reports.test.unit}/phpunit.xml"/>
            <arg value="--coverage-text"/>
            <arg value="--coverage-clover=${dir.reports.test.unit}/clover.xml"/>
            <arg value="--coverage-html=${dir.reports.test.unit}/coverage"/>
            <arg line="--exclude-group behat"/>
            <arg value="--configuration=app"/>
        </exec>
    </target>

    <target name="report:doc">
        <exec executable="${path.php}" passthru="true">
            <arg value="${path.phpdoc}"/>
            <arg value="--ansi"/>
            <arg line="-i *Test.php,*Features/Context/*"/>
            <arg line="-d ${dir.src}"/>
            <arg line="-t ${dir.reports.docs}"/>
        </exec>
    </target>

    <target name="report:loc">
        <exec executable="${path.php}" passthru="true" output="${dir.reports}/loc.txt">
            <arg value="${path.phploc}"/>
            <arg value="--count-tests"/>
            <arg line="${dir.src}"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Database                                                           -->
    <!-- ================================================================== -->

    <target name="base:migrate:diff"
            description="generate and apply a new migration to dev db">
        <SymfonyConsole command="doctrine:migrations:diff" checkreturn="true">
            <arg value="--env=dev"/>
            <arg value="--no-interaction"/>
        </SymfonyConsole>
        <SymfonyConsole command="doctrine:migrations:migrate" checkreturn="true">
            <arg value="--env=dev"/>
            <arg value="--no-interaction"/>
        </SymfonyConsole>
    </target>

    <!-- test db -->
    <target name="base:test:reset"
            description="reset testing database"
            depends="base:test:drop,base:test:create,base:test:update,base:test:fill"/>

    <target name="base:test:drop">
        <SymfonyConsole command="doctrine:database:drop">
            <arg value="--env=test"/>
            <arg value="--force"/>
        </SymfonyConsole>
    </target>

    <target name="base:test:create">
        <SymfonyConsole command="doctrine:database:create" checkreturn="true">
            <arg value="--env=test"/>
        </SymfonyConsole>
    </target>

    <target name="base:test:update">
        <SymfonyConsole command="doctrine:migrations:migrate" checkreturn="true">
            <arg value="--env=test"/>
            <arg value="--no-interaction"/>
        </SymfonyConsole>
    </target>

    <target name="base:test:fill">
        <SymfonyConsole command="doctrine:fixtures:load" checkreturn="true">
            <arg value="--env=test"/>
            <arg value="--no-interaction"/>
            <arg value="--fixtures=${dir.bundle}/DataFixtures/ORM/Dev"/>
            <arg value="--fixtures=${dir.bundle}/DataFixtures/ORM/Test"/>
        </SymfonyConsole>
    </target>

    <!-- dev db -->
    <target name="base:dev:reset"
            description="reset dev database"
            depends="base:dev:drop,base:dev:create,base:dev:update,base:dev:fill"/>

    <target name="base:dev:drop">
        <SymfonyConsole command="doctrine:database:drop">
            <arg value="--env=dev"/>
            <arg value="--force"/>
        </SymfonyConsole>
    </target>

    <target name="base:dev:create">
        <SymfonyConsole command="doctrine:database:create" checkreturn="true">
            <arg value="--env=dev"/>
        </SymfonyConsole>
    </target>

    <target name="base:dev:update">
        <SymfonyConsole command="doctrine:migrations:migrate" checkreturn="true">
            <arg value="--env=dev"/>
            <arg value="--no-interaction"/>
        </SymfonyConsole>
    </target>

    <target name="base:dev:fill">
        <SymfonyConsole command="doctrine:fixtures:load" checkreturn="true">
            <arg value="--env=dev"/>
            <arg value="--no-interaction"/>
            <arg value="--fixtures=${dir.bundle}/DataFixtures/ORM/Dev"/>
            <arg value="--fixtures=${dir.bundle}/DataFixtures/ORM/Prod"/>
        </SymfonyConsole>
    </target>

    <!-- prod db -->
    <target name="base:prod:dump"
            description="dump prod database">
        <exec executable="${path.php}">
            <arg value="dumpsf2.php"/>
        </exec>
    </target>

    <target name="base:prod:create"
            description="init prod database">
        <SymfonyConsole command="doctrine:database:create" checkreturn="true">
            <arg value="--env=prod"/>
        </SymfonyConsole>
        <SymfonyConsole command="doctrine:migrations:migrate" checkreturn="true">
            <arg value="--env=prod"/>
            <arg value="--no-interaction"/>
        </SymfonyConsole>
        <SymfonyConsole command="doctrine:fixtures:load" checkreturn="true">
            <arg value="--env=prod"/>
            <arg value="--no-interaction"/>
            <arg value="--fixtures=${dir.bundle}/DataFixtures/ORM/Prod"/>
        </SymfonyConsole>
    </target>

    <target name="base:prod:update"
            description="update prod database"
            depends="base:prod:dump">
        <SymfonyConsole command="doctrine:migrations:migrate" checkreturn="true">
            <arg value="--env=prod"/>
            <arg value="--no-interaction"/>
        </SymfonyConsole>
    </target>

    <!-- ================================================================== -->
    <!-- Misc                                                               -->
    <!-- ================================================================== -->

    <target name="cache:clear:test">
        <SymfonyConsole command="cache:clear" checkreturn="true">
            <arg value="--env=test"/>
        </SymfonyConsole>
    </target>
</project>
